name: 通用设备编译固件

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "lede-master"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
          - Lienol-master
  schedule:
    - cron: '0 4 * * *'  # 每天 04:00 运行

env:
  FEEDS_CONF: config/${{ inputs.source_branch || 'lede-master' }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch || 'lede-master' }}/config
  DIY_P1_SH: config/${{ inputs.source_branch || 'lede-master' }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch || 'lede-master' }}/diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    env:
      SOURCE_BRANCH: ${{ github.event_name == 'schedule' && 'lede-master' || inputs.source_branch }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://example.com/dependency-list) # Adjust URL
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          sudo timedatectl set-timezone "$TZ"
          echo "status=success" >> $GITHUB_ENV

      - name: Clone source code
        if: env.status == 'success'
        run: |
          case "$SOURCE_BRANCH" in
            openwrt-main)
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
              ;;
            lede-master)
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
              ;;
            immortalwrt-master)
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
              ;;
            Lienol-master)
              REPO_URL="https://github.com/Lienol/openwrt"
              REPO_BRANCH="22.03"
              TAGS_NAME="Lienol"
              ;;
            *)
              echo "Unknown source code repository."
              exit 1
              ;;
          esac

          git clone -q --single-branch --depth=1 --branch=$REPO_BRANCH $REPO_URL openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

          echo "build_tag=OpenWrt_${TAGS_NAME}_${{ inputs.openwrt_storage }}_$(date +"%Y.%m")" >> $GITHUB_ENV

      - name: Load custom feeds
        run: |
          [[ -f "$FEEDS_CONF" ]] && cp -f "$FEEDS_CONF" openwrt/feeds.conf.default
          chmod +x "$DIY_P1_SH"
          ( cd openwrt && $GITHUB_WORKSPACE/$DIY_P1_SH )

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "$CONFIG_FILE" ]] && cp -f "$CONFIG_FILE" openwrt/.config
          chmod +x "$DIY_P2_SH"
          ( cd openwrt && $GITHUB_WORKSPACE/$DIY_P2_SH )

      - name: Download package
        run: |
          cd openwrt && make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the OpenWrt
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> $GITHUB_ENV

      - name: Check space usage
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: env.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
  if: env.UPLOAD_FIRMWARE == 'true'
  run: |
    cd openwrt/bin/targets/*/*
    rm -rf packages
    echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    echo "organize_status=success" >> $GITHUB_STATE

- name: Upload firmware directory
  uses: actions/upload-artifact@main
  if: ${{ env.organize_status == 'success' }}
  with:
    name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    path: ${{ env.FIRMWARE }}


      - name: Generate release tag
        if: env.UPLOAD_RELEASE == 'true'
        run: |
          echo "release_tag=LEDE_NSS_AX1800PRO_$(date +%Y.%m.%d-%H%M)" >> $GITHUB_OUTPUT
          echo "### 固件信息" > release.txt
          echo "- 固件类型: LEDE" >> release.txt
          echo "- 分支: master" >> release.txt
          echo "- 支持的设备: jdcloud_re-ss-01" >> release.txt
          echo "- 默认登录IP: 192.168.10.1" >> release.txt
          echo "- 默认用户名: root" >> release.txt
          echo "- 默认密码: password" >> release.txt

      - name: Manage Releases
        run: |
          releases=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | "\(.id) \(.created_at)"')

          if [ -z "$releases" ]; then
            echo "No releases to manage."
            exit 0
          fi

          current_date=$(date +%s)

          echo "$releases" | while read release_info; do
            release_id=$(echo "$release_info" | cut -d' ' -f1)
            release_date=$(echo "$release_info" | cut -d' ' -f2)

            release_date_seconds=$(date -d "$release_date" +%s || exit 1)
            let date_diff=($current_date-$release_date_seconds)/86400

            if [ $date_diff -gt 7 ]; then
              echo "Deleting release ID: $release_id, $date_diff days old."
              curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$release_id" || echo "Failed to delete release ID: $release_id"
            else
              echo "Keeping release ID: $release_id, created within the last week."
            fi
          done

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
